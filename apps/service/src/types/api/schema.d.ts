/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/teacher/qna/chat/{chatId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 채팅메시지 수정 */
    put: operations['updateChat'];
    post?: never;
    /** 채팅메시지 삭제 */
    delete: operations['deleteChat'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/notice/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 수정 */
    put: operations['update'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/qna/{qnaId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Q&A 상세 조회 */
    get: operations['getById'];
    /** Q&A 수정 */
    put: operations['update_1'];
    post?: never;
    /** Q&A 삭제 */
    delete: operations['delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/qna/chat/{chatId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 채팅메시지 수정 */
    put: operations['updateChat_1'];
    post?: never;
    /** 채팅메시지 삭제 */
    delete: operations['deleteChat_1'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/notice/read/{noticeId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 공지사항 읽기 */
    put: operations['readNotice'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내 정보 조회 */
    get: operations['me'];
    /** 내 정보 수정 */
    put: operations['update_2'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/teacher/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 수정 */
    put: operations['update_3'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/problem/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 상세 조회 */
    get: operations['getProblem'];
    /** 수정 */
    put: operations['updateProblem'];
    post?: never;
    /** 삭제 */
    delete: operations['deleteProblem'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/problem-set/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 상세 조회 */
    get: operations['getProblemSet'];
    /** 수정 */
    put: operations['update_4'];
    post?: never;
    /** 삭제 */
    delete: operations['delete_1'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/problem-set/{id}/status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 수정 */
    put: operations['update_5'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/problem-set/toggle-status/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 컨펌 여부 토글 */
    put: operations['toggleStatus'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/practice-test/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 수정 */
    put: operations['update_6'];
    post?: never;
    /** 삭제 */
    delete: operations['delete_2'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/notice/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 수정 */
    put: operations['update_7'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/concept/{conceptId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 개념태그 수정 */
    put: operations['update_8'];
    post?: never;
    /** 개념태그 삭제 */
    delete: operations['delete_3'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/concept/category/{categoryId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 대분류 수정 */
    put: operations['updateCategory'];
    post?: never;
    /** 대분류 삭제 */
    delete: operations['deleteCategory'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/qna/chat': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 채팅메시지 생성 */
    post: operations['addChat'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/notice': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 학생 별 공지사항 전체 조회 */
    get: operations['getsAll'];
    put?: never;
    /** 생성 */
    post: operations['create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/auth/login/local': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 이메일 로그인 */
    post: operations['login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/study/submit/pointing': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 포인팅 피드백(이해했어요/모르겠어요) 제출 */
    post: operations['feedback'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/study/submit/answer': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 답안 제출 */
    post: operations['submit'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/qna': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Q&A 목록 조회 */
    get: operations['gets'];
    put?: never;
    /** Q&A 생성 */
    post: operations['create_1'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/qna/exist': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Q&A 존재 여부 확인, 사용자가 동일한 항목에 대해 QnA 작성 여부 확인 */
    post: operations['checkExists'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/qna/chat': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 채팅메시지 생성 */
    post: operations['addChat_1'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/auth/social/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 소셜 로그인 URL 요청 [네이버만 완료] */
    post: operations['getSocialLoginUrl'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/auth/register/social': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 소셜 로그인 이후, 정보 등록 */
    post: operations['registerSocial'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/common/upload-file': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 파일 업로드, (응답의 uploadUrl로 AWS S3 업로드 해야합니다) */
    post: operations['getPreSignedUrl'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 관리자 계정 생성 */
    post: operations['create_2'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/teacher': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 전체 조회 */
    get: operations['gets_1'];
    put?: never;
    /** 생성 */
    post: operations['create_3'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/teacher/assign/{teacherId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 선생님에게 학생 배정 */
    post: operations['assignStudentsToTeacher'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/publish': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 검색 */
    get: operations['search'];
    put?: never;
    /** 생성 */
    post: operations['create_4'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/problem': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 검색 */
    get: operations['search_1'];
    put?: never;
    /** 생성 */
    post: operations['createProblem'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/problem-set': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 검색 */
    get: operations['search_2'];
    put?: never;
    /** 생성 */
    post: operations['create_5'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/practice-test': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 검색 */
    get: operations['search_3'];
    put?: never;
    /** 생성 */
    post: operations['create_6'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/notice': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 학생 별 공지사항 전체 조회 */
    get: operations['getsAll_1'];
    put?: never;
    /** 생성 */
    post: operations['create_7'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/concept': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 개념 태그 검색 */
    get: operations['search_4'];
    put?: never;
    /** 개념태그 생성 */
    post: operations['create_8'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/concept/category': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 대분류 검색 */
    get: operations['searchCategory'];
    put?: never;
    /** 대분류 생성 */
    post: operations['createCategory'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/auth/login/local': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 이메일 로그인 */
    post: operations['login_1'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/study/publish/weekly': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 학생 주간 발행(숙제) 조회 */
    get: operations['search_5'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/study/publish/monthly': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 학생 월간 발행(숙제) 조회 */
    get: operations['searchMonthly'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/study/publish/detail/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 발행(숙제) 상세 조회 */
    get: operations['getPublishById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/study/progress/weekly': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 학생 주간 학습 진행 상황 조회 */
    get: operations['getWeeklyProgress'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/study/problem/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 문제 상세 조회 */
    get: operations['getProblemById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/study/child-problem/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 새끼 문제 상세 조회 */
    get: operations['getChildProblemById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/students': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내 학생 전체 조회 */
    get: operations['getMyStudents'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/qna': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Q&A 목록 조회 */
    get: operations['gets_2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/qna/{qnaId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Q&A 상세 조회 */
    get: operations['getById_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/notice/available': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 학생 별 유효 공지사항(현재 학생이 볼 수 있는 공지사항) 조회 */
    get: operations['getsAvailable'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/teacher/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내 정보 조회 */
    get: operations['getTeacherMe'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/study/publish/weekly': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 주간 발행(숙제) 조회 */
    get: operations['search_6'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/study/publish/monthly': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 월간 발행(숙제) 조회 */
    get: operations['searchMonthly_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/study/publish/detail/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 발행(숙제) 상세 조회 */
    get: operations['getPublishById_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/study/progress/weekly': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 학생 주간 학습 진행 상황 조회 */
    get: operations['getWeeklyProgress_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/study/problem/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 문제 상세 조회 */
    get: operations['getProblemById_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/study/child-problem/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 새끼 문제 상세 조회 */
    get: operations['getChildProblemById_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/notice': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 공지사항 목록 조회 */
    get: operations['getsAvailable_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/student/notice/count': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 읽지 않은 공지사항 개수 조회 */
    get: operations['countAvailable'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/common/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 토큰 갱신 */
    get: operations['refresh'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/student': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 검색 */
    get: operations['search_7'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/publish/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 상세 조회 */
    get: operations['getById_2'];
    put?: never;
    post?: never;
    /** 삭제 */
    delete: operations['delete_4'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/notice/available': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 학생 별 유효 공지사항(현재 학생이 볼 수 있는 공지사항) 조회 */
    get: operations['getsAvailable_2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 토큰 갱신 */
    get: operations['refresh_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/common/upload-file/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 삭제 */
    delete: operations['delete_5'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/teacher/{teacherId}/{studentId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 선생님으로부터 학생 제거 */
    delete: operations['removeStudentFromTeacher'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/problem-set/{id}/{problemId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 문제 세트에서 문제 삭제 */
    delete: operations['deleteItem'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ChatUpdateRequest: {
      content: string;
      images?: number[];
    };
    ChatResp: {
      /** Format: int64 */
      id: number;
      isMine: boolean;
      content: string;
      images: components['schemas']['UploadFileResp'][];
    };
    ContentBlockResp: {
      /** Format: int64 */
      id: number;
      style: string;
      /** Format: int32 */
      rank: number;
      /** @enum {string} */
      type: 'TEXT' | 'IMAGE';
      data: string;
    };
    ContentResp: {
      /** Format: int64 */
      id: number;
      blocks: components['schemas']['ContentBlockResp'][];
    };
    QnAMetaResp: {
      /** Format: int64 */
      id: number;
      title: string;
      /** @enum {string} */
      type:
        | 'PROBLEM_CONTENT'
        | 'PROBLEM_POINTING_QUESTION'
        | 'PROBLEM_POINTING_COMMENT'
        | 'PROBLEM_MAIN_ANALYSIS'
        | 'PROBLEM_MAIN_HAND_ANALYSIS'
        | 'PROBLEM_READING_TIP_CONTENT'
        | 'PROBLEM_ONE_STEP_MORE'
        | 'CHILD_PROBLEM_CONTENT'
        | 'CHILD_PROBLEM_POINTING_QUESTION'
        | 'CHILD_PROBLEM_POINTING_COMMENT';
      /** Format: date */
      publishDate: string;
    };
    QnAResp: {
      /** Format: int64 */
      id: number;
      title: string;
      /** @enum {string} */
      type:
        | 'PROBLEM_CONTENT'
        | 'PROBLEM_POINTING_QUESTION'
        | 'PROBLEM_POINTING_COMMENT'
        | 'PROBLEM_MAIN_ANALYSIS'
        | 'PROBLEM_MAIN_HAND_ANALYSIS'
        | 'PROBLEM_READING_TIP_CONTENT'
        | 'PROBLEM_ONE_STEP_MORE'
        | 'CHILD_PROBLEM_CONTENT'
        | 'CHILD_PROBLEM_POINTING_QUESTION'
        | 'CHILD_PROBLEM_POINTING_COMMENT';
      /** Format: date */
      publishDate: string;
      contentTitle: string;
      content: components['schemas']['ContentResp'];
      question: string;
      chats: components['schemas']['ChatResp'][];
    };
    UploadFileResp: {
      /** Format: int64 */
      id: number;
      fileName: string;
      url: string;
    };
    NoticeUpdateRequest: {
      /** Format: date */
      startAt: string;
      /** Format: date */
      endAt: string;
      content: string;
    };
    NoticeResp: {
      /** Format: int64 */
      id: number;
      student: components['schemas']['StudentResp'];
      /** Format: date */
      startAt: string;
      /** Format: date */
      endAt: string;
      isRead: boolean;
      content: string;
    };
    StudentResp: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int32 */
      grade: number;
      isFirstLogin: boolean;
    };
    QnAUpdateRequest: {
      question: string;
    };
    StudentUpdateRequest: {
      name: string;
      /** Format: int32 */
      grade: number;
    };
    TeacherUpdateRequest: {
      name: string;
      email: string;
      newPassword?: string;
    };
    TeacherResp: {
      /** Format: int64 */
      id: number;
      name: string;
      email: string;
      students: components['schemas']['StudentResp'][];
    };
    'ChildProblemUpdateDTO.Request': {
      /** Format: int64 */
      id?: number;
      /** Format: int32 */
      no?: number;
      problemContent?: components['schemas']['ContentUpdateRequest'];
      /** @enum {string} */
      answerType?: 'MULTIPLE_CHOICE' | 'SHORT_ANSWER';
      /** Format: int32 */
      answer?: number;
      concepts?: number[];
      pointings?: components['schemas']['PointingUpdateRequest'][];
    };
    ContentBlockUpdateRequest: {
      /** Format: int64 */
      id: number;
      /** Format: int32 */
      rank: number;
      /** @enum {string} */
      type?: 'TEXT' | 'IMAGE';
      data?: string;
    };
    ContentUpdateRequest: {
      /** Format: int64 */
      id?: number;
      blocks?: components['schemas']['ContentBlockUpdateRequest'][];
    };
    PointingUpdateRequest: {
      /** Format: int64 */
      id?: number;
      /** Format: int32 */
      no?: number;
      questionContent?: components['schemas']['ContentUpdateRequest'];
      commentContent?: components['schemas']['ContentUpdateRequest'];
      concepts?: number[];
    };
    ProblemUpdateRequest: {
      customId: string;
      /** @enum {string} */
      problemType: 'GICHUL_PROBLEM' | 'VARIANT_PROBLEM' | 'CREATION_PROBLEM';
      /** Format: int64 */
      practiceTestId?: number;
      /** Format: int32 */
      practiceTestNo?: number;
      title: string;
      concepts?: number[];
      /** @enum {string} */
      answerType: 'MULTIPLE_CHOICE' | 'SHORT_ANSWER';
      /** Format: int32 */
      answer: number;
      /** Format: int32 */
      difficulty: number;
      /** Format: int32 */
      recommendedTimeSec: number;
      memo?: string;
      problemContent: components['schemas']['ContentUpdateRequest'];
      pointings?: components['schemas']['PointingUpdateRequest'][];
      /** Format: int64 */
      mainAnalysisImageId?: number;
      /** Format: int64 */
      mainHandAnalysisImageId?: number;
      readingTipContent?: components['schemas']['ContentUpdateRequest'];
      oneStepMoreContent?: components['schemas']['ContentUpdateRequest'];
      childProblems?: components['schemas']['ChildProblemUpdateDTO.Request'][];
    };
    ChildProblemWithStudyInfoResp: {
      /** Format: int64 */
      id: number;
      /** Format: int32 */
      no: number;
      problemContent: components['schemas']['ContentResp'];
      /** @enum {string} */
      answerType: 'MULTIPLE_CHOICE' | 'SHORT_ANSWER';
      /** Format: int32 */
      answer: number;
      concepts: components['schemas']['ConceptResp'][];
      pointings: components['schemas']['PointingWithFeedbackResp'][];
      /** Format: int32 */
      submitAnswer: number;
      isCorrect: boolean;
      isDone: boolean;
    };
    ConceptCategoryResp: {
      /** Format: int64 */
      id: number;
      name: string;
    };
    ConceptResp: {
      /** Format: int64 */
      id: number;
      name: string;
      category: components['schemas']['ConceptCategoryResp'];
    };
    PointingResp: {
      /** Format: int64 */
      id: number;
      /** Format: int32 */
      no: number;
      questionContent: components['schemas']['ContentResp'];
      commentContent: components['schemas']['ContentResp'];
      concepts: components['schemas']['ConceptResp'][];
    };
    PointingWithFeedbackResp: {
      /** Format: int64 */
      id: number;
      /** Format: int32 */
      no: number;
      questionContent: components['schemas']['ContentResp'];
      commentContent: components['schemas']['ContentResp'];
      concepts: components['schemas']['ConceptResp'][];
      isUnderstood?: boolean;
    };
    PracticeTestResp: {
      /** Format: int64 */
      id: number;
      /** Format: int32 */
      year: number;
      /** Format: int32 */
      month: number;
      /** Format: int32 */
      grade: number;
      name: string;
      displayName: string;
    };
    ProblemInfoResp: {
      /** Format: int64 */
      id: number;
      customId: string;
      /** @enum {string} */
      problemType: 'GICHUL_PROBLEM' | 'VARIANT_PROBLEM' | 'CREATION_PROBLEM';
      practiceTest: components['schemas']['PracticeTestResp'];
      /** Format: int32 */
      practiceTestNo: number;
      problemContent: components['schemas']['ContentResp'];
      title: string;
      /** @enum {string} */
      answerType: 'MULTIPLE_CHOICE' | 'SHORT_ANSWER';
      /** Format: int32 */
      answer: number;
      /** Format: int32 */
      difficulty: number;
      /** Format: int32 */
      recommendedTimeSec: number;
      memo: string;
      concepts: components['schemas']['ConceptResp'][];
      mainAnalysisImage: components['schemas']['UploadFileResp'];
      mainHandAnalysisImage: components['schemas']['UploadFileResp'];
      readingTipContent: components['schemas']['ContentResp'];
      oneStepMoreContent: components['schemas']['ContentResp'];
      pointings: components['schemas']['PointingResp'][];
      childProblems: components['schemas']['ChildProblemWithStudyInfoResp'][];
    };
    ProblemMetaResp: {
      /** Format: int64 */
      id: number;
      customId: string;
      /** @enum {string} */
      problemType: 'GICHUL_PROBLEM' | 'VARIANT_PROBLEM' | 'CREATION_PROBLEM';
      practiceTest: components['schemas']['PracticeTestResp'];
      /** Format: int32 */
      practiceTestNo: number;
      problemContent: components['schemas']['ContentResp'];
      title: string;
      /** @enum {string} */
      answerType: 'MULTIPLE_CHOICE' | 'SHORT_ANSWER';
      /** Format: int32 */
      answer: number;
      /** Format: int32 */
      difficulty: number;
      /** Format: int32 */
      recommendedTimeSec: number;
      memo: string;
      concepts: components['schemas']['ConceptResp'][];
    };
    SubmissionResp: {
      /** Format: int32 */
      submitAnswer: number;
      isCorrect: boolean;
      isDone: boolean;
    };
    ProblemSetItemRequest: {
      /** Format: int32 */
      no: number;
      /** Format: int64 */
      problemId: number;
    };
    ProblemSetUpdateRequest: {
      title: string;
      /** @enum {string} */
      status: 'CONFIRMED' | 'DOING';
      problems?: components['schemas']['ProblemSetItemRequest'][];
    };
    ProblemSetItemResp: {
      /** Format: int64 */
      id: number;
      /** Format: int32 */
      no: number;
      problem: components['schemas']['ProblemMetaResp'];
    };
    ProblemSetMetaResp: {
      /** Format: int64 */
      id: number;
      title: string;
      /** @enum {string} */
      status: 'CONFIRMED' | 'DOING';
      firstProblem: components['schemas']['ProblemMetaResp'];
    };
    ProblemSetResp: {
      /** Format: int64 */
      id: number;
      title: string;
      /** @enum {string} */
      status: 'CONFIRMED' | 'DOING';
      firstProblem: components['schemas']['ProblemMetaResp'];
      problems: components['schemas']['ProblemSetItemResp'][];
    };
    ProblemSetUpdateStatusReq: {
      /** @enum {string} */
      status: 'CONFIRMED' | 'DOING';
    };
    Request: {
      /** Format: int32 */
      year: number;
      /** Format: int32 */
      month: number;
      /** Format: int32 */
      grade: number;
      name: string;
    };
    ConceptUpdateRequest: {
      name: string;
      /** Format: int64 */
      categoryId: number;
    };
    ConceptCategoryUpdateRequest: {
      name: string;
    };
    ChatCreateRequest: {
      /** Format: int64 */
      qnaId: number;
      content: string;
      images?: number[];
    };
    NoticeCreateRequest: {
      /** Format: date */
      startAt: string;
      /** Format: date */
      endAt: string;
      content: string;
      /** Format: int64 */
      studentId: number;
    };
    TeacherLoginReq: {
      email: string;
      password: string;
    };
    JwtResp: {
      accessToken: string;
    };
    TeacherTokenResp: {
      /** Format: int64 */
      id: number;
      name: string;
      email: string;
      students: components['schemas']['StudentResp'][];
      token?: components['schemas']['JwtResp'];
    };
    PointingFeedbackRequest: {
      /** Format: int64 */
      pointingId: number;
      isUnderstood: boolean;
    };
    SubmissionRequest: {
      /** Format: int64 */
      publishId: number;
      /** Format: int64 */
      problemId?: number;
      /** Format: int64 */
      childProblemId?: number;
      /** Format: int32 */
      submitAnswer: number;
    };
    /** @description problemId, childProblemId, pointingId 중 하나만 입력 가능 */
    QnACreateRequest: {
      /** Format: int64 */
      publishId: number;
      /** @enum {string} */
      type:
        | 'PROBLEM_CONTENT'
        | 'PROBLEM_POINTING_QUESTION'
        | 'PROBLEM_POINTING_COMMENT'
        | 'PROBLEM_MAIN_ANALYSIS'
        | 'PROBLEM_MAIN_HAND_ANALYSIS'
        | 'PROBLEM_READING_TIP_CONTENT'
        | 'PROBLEM_ONE_STEP_MORE'
        | 'CHILD_PROBLEM_CONTENT'
        | 'CHILD_PROBLEM_POINTING_QUESTION'
        | 'CHILD_PROBLEM_POINTING_COMMENT';
      /** Format: int64 */
      problemId?: number;
      /** Format: int64 */
      childProblemId?: number;
      /** Format: int64 */
      pointingId?: number;
      question: string;
    };
    QnACheckRequest: {
      /** Format: int64 */
      publishId: number;
      /** @enum {string} */
      type:
        | 'PROBLEM_CONTENT'
        | 'PROBLEM_POINTING_QUESTION'
        | 'PROBLEM_POINTING_COMMENT'
        | 'PROBLEM_MAIN_ANALYSIS'
        | 'PROBLEM_MAIN_HAND_ANALYSIS'
        | 'PROBLEM_READING_TIP_CONTENT'
        | 'PROBLEM_ONE_STEP_MORE'
        | 'CHILD_PROBLEM_CONTENT'
        | 'CHILD_PROBLEM_POINTING_QUESTION'
        | 'CHILD_PROBLEM_POINTING_COMMENT';
      /**
       * Format: int64
       * @description 메인문제ID(메인 문제에 대한 질문일 경우)
       */
      problemId?: number;
      /**
       * Format: int64
       * @description 새끼문제ID(새끼 문제에 대한 질문일 경우)
       */
      childProblemId?: number;
      /**
       * Format: int64
       * @description 포인팅ID(포인팅에 대한 질문일 경우)
       */
      pointingId?: number;
    };
    QnACheckResp: {
      /** Format: int64 */
      id: number;
      isExist: boolean;
    };
    SocialLoginReq: {
      /** @enum {string} */
      provider: 'KAKAO' | 'GOOGLE';
      redirectUri: string;
    };
    SocialLoginUrlResp: {
      /** @enum {string} */
      provider: 'KAKAO' | 'GOOGLE';
      loginUrl: string;
    };
    PreSignedReq: {
      fileName: string;
    };
    PreSignedResp: {
      file: components['schemas']['UploadFileResp'];
      contentDisposition: string;
      uploadUrl: string;
    };
    AdminCreateRequest: {
      email: string;
      password: string;
    };
    TeacherCreateRequest: {
      name: string;
      email: string;
      password: string;
    };
    TeacherStudentAssignReq: {
      students: number[];
    };
    PublishCreateRequest: {
      /** Format: int64 */
      problemSetId: number;
      /** Format: int64 */
      studentId: number;
      /** Format: date */
      publishAt: string;
    };
    ProblemWithStudyInfoResp: {
      /** Format: int64 */
      id: number;
      customId: string;
      /** @enum {string} */
      problemType: 'GICHUL_PROBLEM' | 'VARIANT_PROBLEM' | 'CREATION_PROBLEM';
      practiceTest: components['schemas']['PracticeTestResp'];
      /** Format: int32 */
      practiceTestNo: number;
      problemContent: components['schemas']['ContentResp'];
      title: string;
      /** @enum {string} */
      answerType: 'MULTIPLE_CHOICE' | 'SHORT_ANSWER';
      /** Format: int32 */
      answer: number;
      /** Format: int32 */
      difficulty: number;
      /** Format: int32 */
      recommendedTimeSec: number;
      memo: string;
      concepts: components['schemas']['ConceptResp'][];
      mainAnalysisImage: components['schemas']['UploadFileResp'];
      mainHandAnalysisImage: components['schemas']['UploadFileResp'];
      readingTipContent: components['schemas']['ContentResp'];
      oneStepMoreContent: components['schemas']['ContentResp'];
      pointings: components['schemas']['PointingWithFeedbackResp'][];
      /** Format: int32 */
      submitAnswer: number;
      isCorrect: boolean;
      isDone: boolean;
      childProblems: components['schemas']['ChildProblemWithStudyInfoResp'][];
    };
    PublishMetaResp: {
      /** Format: int64 */
      id: number;
      /** Format: date */
      publishAt: string;
      /** @enum {string} */
      progress: 'DONE' | 'DOING' | 'NONE';
      problemSet: components['schemas']['ProblemSetMetaResp'];
    };
    PublishProblemGroupResp: {
      /** Format: int32 */
      no: number;
      /** @enum {string} */
      progress: 'DONE' | 'DOING' | 'NONE';
      problem: components['schemas']['ProblemWithStudyInfoResp'];
      childProblems: components['schemas']['ChildProblemWithStudyInfoResp'][];
    };
    PublishResp: {
      /** Format: int64 */
      id: number;
      /** Format: date */
      publishAt: string;
      /** @enum {string} */
      progress: 'DONE' | 'DOING' | 'NONE';
      problemSet: components['schemas']['ProblemSetMetaResp'];
      data: components['schemas']['PublishProblemGroupResp'][];
    };
    ChildProblemCreateRequest: {
      /** Format: int32 */
      no?: number;
      problemContent?: components['schemas']['ContentCreateRequest'];
      /** @enum {string} */
      answerType?: 'MULTIPLE_CHOICE' | 'SHORT_ANSWER';
      /** Format: int32 */
      answer?: number;
      concepts?: number[];
      pointings?: components['schemas']['PointingCreateRequest'][];
    };
    ContentBlockCreateRequest: {
      /** Format: int32 */
      rank: number;
      /** @enum {string} */
      type?: 'TEXT' | 'IMAGE';
      data?: string;
      style?: string;
    };
    ContentCreateRequest: {
      blocks?: components['schemas']['ContentBlockCreateRequest'][];
    };
    PointingCreateRequest: {
      /** Format: int32 */
      no?: number;
      questionContent?: components['schemas']['ContentCreateRequest'];
      commentContent?: components['schemas']['ContentCreateRequest'];
      concepts?: number[];
    };
    ProblemCreateRequest: {
      customId: string;
      /** @enum {string} */
      problemType: 'GICHUL_PROBLEM' | 'VARIANT_PROBLEM' | 'CREATION_PROBLEM';
      /** Format: int64 */
      practiceTestId?: number;
      /** Format: int32 */
      practiceTestNo?: number;
      title: string;
      concepts?: number[];
      /** @enum {string} */
      answerType: 'MULTIPLE_CHOICE' | 'SHORT_ANSWER';
      /** Format: int32 */
      answer: number;
      /** Format: int32 */
      difficulty: number;
      /** Format: int32 */
      recommendedTimeSec: number;
      memo?: string;
      problemContent: components['schemas']['ContentCreateRequest'];
      pointings?: components['schemas']['PointingCreateRequest'][];
      /** Format: int64 */
      mainAnalysisImageId?: number;
      /** Format: int64 */
      mainHandAnalysisImageId?: number;
      readingTipContent?: components['schemas']['ContentCreateRequest'];
      oneStepMoreContent?: components['schemas']['ContentCreateRequest'];
      childProblems?: components['schemas']['ChildProblemCreateRequest'][];
    };
    ProblemSetCreateRequest: {
      title: string;
      problems?: components['schemas']['ProblemSetItemRequest'][];
    };
    PracticeTestCreateRequest: {
      /** Format: int32 */
      year: number;
      /** Format: int32 */
      month: number;
      /** Format: int32 */
      grade: number;
      name: string;
    };
    ConceptCreateRequest: {
      name: string;
      /** Format: int64 */
      categoryId: number;
    };
    ConceptCategoryCreateRequest: {
      name: string;
    };
    AdminLoginReq: {
      email: string;
      password: string;
    };
    AdminTokenResp: {
      /** Format: int64 */
      id: number;
      email: string;
      token: components['schemas']['JwtResp'];
    };
    ListRespPublishMetaResp: {
      /** Format: int32 */
      total: number;
      data: components['schemas']['PublishMetaResp'][];
    };
    PublishStudentProgressResp: {
      /** Format: double */
      progress: number;
    };
    ListRespStudentResp: {
      /** Format: int32 */
      total: number;
      data: components['schemas']['StudentResp'][];
    };
    PageRespQnAMetaResp: {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      size: number;
      /** Format: int32 */
      lastPage: number;
      data: components['schemas']['QnAMetaResp'][];
    };
    ListRespNoticeResp: {
      /** Format: int32 */
      total: number;
      data: components['schemas']['NoticeResp'][];
    };
    NoticeUnreadCountResp: {
      /** Format: int64 */
      count?: number;
    };
    ListRespTeacherResp: {
      /** Format: int32 */
      total: number;
      data: components['schemas']['TeacherResp'][];
    };
    PageRespStudentResp: {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      size: number;
      /** Format: int32 */
      lastPage: number;
      data: components['schemas']['StudentResp'][];
    };
    PageRespProblemMetaResp: {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      size: number;
      /** Format: int32 */
      lastPage: number;
      data: components['schemas']['ProblemMetaResp'][];
    };
    PageRespProblemSetResp: {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      size: number;
      /** Format: int32 */
      lastPage: number;
      data: components['schemas']['ProblemSetResp'][];
    };
    PageRespPracticeTestResp: {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      size: number;
      /** Format: int32 */
      lastPage: number;
      data: components['schemas']['PracticeTestResp'][];
    };
    PageRespConceptResp: {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      size: number;
      /** Format: int32 */
      lastPage: number;
      data: components['schemas']['ConceptResp'][];
    };
    PageRespConceptCategoryResp: {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      size: number;
      /** Format: int32 */
      lastPage: number;
      data: components['schemas']['ConceptCategoryResp'][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  updateChat: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        chatId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChatUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['QnAResp'];
        };
      };
    };
  };
  deleteChat: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        chatId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['QnAResp'];
        };
      };
    };
  };
  update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NoticeUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['NoticeResp'];
        };
      };
    };
  };
  getById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        qnaId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['QnAResp'];
        };
      };
    };
  };
  update_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        qnaId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QnAUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['QnAResp'];
        };
      };
    };
  };
  delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        qnaId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateChat_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        chatId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChatUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['QnAResp'];
        };
      };
    };
  };
  deleteChat_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        chatId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['QnAResp'];
        };
      };
    };
  };
  readNotice: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        noticeId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['NoticeResp'];
        };
      };
    };
  };
  me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['StudentResp'];
        };
      };
    };
  };
  update_2: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['StudentUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['StudentResp'];
        };
      };
    };
  };
  update_3: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TeacherUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TeacherResp'];
        };
      };
    };
  };
  getProblem: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ProblemInfoResp'];
        };
      };
    };
  };
  updateProblem: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProblemUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ProblemInfoResp'];
        };
      };
    };
  };
  deleteProblem: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getProblemSet: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ProblemSetResp'];
        };
      };
    };
  };
  update_4: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProblemSetUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ProblemSetResp'];
        };
      };
    };
  };
  delete_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  update_5: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProblemSetUpdateStatusReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ProblemSetResp'];
        };
      };
    };
  };
  toggleStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ProblemSetResp'];
        };
      };
    };
  };
  update_6: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Request'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PracticeTestResp'];
        };
      };
    };
  };
  delete_2: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  update_7: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NoticeUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['NoticeResp'];
        };
      };
    };
  };
  update_8: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        conceptId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ConceptUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ConceptResp'];
        };
      };
    };
  };
  delete_3: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        conceptId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateCategory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        categoryId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ConceptCategoryUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ConceptCategoryResp'];
        };
      };
    };
  };
  deleteCategory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        categoryId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  addChat: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChatCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['QnAResp'];
        };
      };
    };
  };
  getsAll: {
    parameters: {
      query: {
        studentId: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ListRespNoticeResp'];
        };
      };
    };
  };
  create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NoticeCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['NoticeResp'];
        };
      };
    };
  };
  login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TeacherLoginReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TeacherTokenResp'];
        };
      };
    };
  };
  feedback: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PointingFeedbackRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  submit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmissionRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['SubmissionResp'];
        };
      };
    };
  };
  gets: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageRespQnAMetaResp'];
        };
      };
    };
  };
  create_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QnACreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['QnAResp'];
        };
      };
    };
  };
  checkExists: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QnACheckRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['QnACheckResp'];
        };
      };
    };
  };
  addChat_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChatCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['QnAResp'];
        };
      };
    };
  };
  getSocialLoginUrl: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SocialLoginReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['SocialLoginUrlResp'];
        };
      };
    };
  };
  registerSocial: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['StudentUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['StudentResp'];
        };
      };
    };
  };
  getPreSignedUrl: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PreSignedReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PreSignedResp'];
        };
      };
    };
  };
  create_2: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AdminCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  gets_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ListRespTeacherResp'];
        };
      };
    };
  };
  create_3: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TeacherCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TeacherResp'];
        };
      };
    };
  };
  assignStudentsToTeacher: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teacherId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TeacherStudentAssignReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TeacherResp'];
        };
      };
    };
  };
  search: {
    parameters: {
      query?: {
        year?: number;
        month?: number;
        studentId?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ListRespPublishMetaResp'];
        };
      };
    };
  };
  create_4: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PublishCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PublishResp'];
        };
      };
    };
  };
  search_1: {
    parameters: {
      query?: {
        customId?: string;
        title?: string;
        concepts?: number[];
        page?: number;
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageRespProblemMetaResp'];
        };
      };
    };
  };
  createProblem: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProblemCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ProblemInfoResp'];
        };
      };
    };
  };
  search_2: {
    parameters: {
      query?: {
        setTitle?: string;
        problemTitle?: string;
        page?: number;
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageRespProblemSetResp'];
        };
      };
    };
  };
  create_5: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProblemSetCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ProblemSetResp'];
        };
      };
    };
  };
  search_3: {
    parameters: {
      query?: {
        query?: string;
        year?: number;
        month?: number;
        grade?: number;
        page?: number;
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageRespPracticeTestResp'];
        };
      };
    };
  };
  create_6: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PracticeTestCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PracticeTestResp'];
        };
      };
    };
  };
  getsAll_1: {
    parameters: {
      query: {
        studentId: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ListRespNoticeResp'];
        };
      };
    };
  };
  create_7: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NoticeCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['NoticeResp'];
        };
      };
    };
  };
  search_4: {
    parameters: {
      query?: {
        query?: string;
        page?: number;
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageRespConceptResp'];
        };
      };
    };
  };
  create_8: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ConceptCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ConceptResp'];
        };
      };
    };
  };
  searchCategory: {
    parameters: {
      query?: {
        query?: string;
        page?: number;
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageRespConceptCategoryResp'];
        };
      };
    };
  };
  createCategory: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ConceptCategoryCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ConceptCategoryResp'];
        };
      };
    };
  };
  login_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AdminLoginReq'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['AdminTokenResp'];
        };
      };
    };
  };
  search_5: {
    parameters: {
      query: {
        studentId: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ListRespPublishMetaResp'];
        };
      };
    };
  };
  searchMonthly: {
    parameters: {
      query: {
        studentId: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ListRespPublishMetaResp'];
        };
      };
    };
  };
  getPublishById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PublishResp'];
        };
      };
    };
  };
  getWeeklyProgress: {
    parameters: {
      query: {
        studentId: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PublishStudentProgressResp'];
        };
      };
    };
  };
  getProblemById: {
    parameters: {
      query: {
        studentId: number;
      };
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ProblemWithStudyInfoResp'];
        };
      };
    };
  };
  getChildProblemById: {
    parameters: {
      query: {
        studentId: number;
      };
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ChildProblemWithStudyInfoResp'];
        };
      };
    };
  };
  getMyStudents: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ListRespStudentResp'];
        };
      };
    };
  };
  gets_2: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageRespQnAMetaResp'];
        };
      };
    };
  };
  getById_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        qnaId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['QnAResp'];
        };
      };
    };
  };
  getsAvailable: {
    parameters: {
      query: {
        studentId: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ListRespNoticeResp'];
        };
      };
    };
  };
  getTeacherMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TeacherResp'];
        };
      };
    };
  };
  search_6: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ListRespPublishMetaResp'];
        };
      };
    };
  };
  searchMonthly_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ListRespPublishMetaResp'];
        };
      };
    };
  };
  getPublishById_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PublishResp'];
        };
      };
    };
  };
  getWeeklyProgress_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PublishStudentProgressResp'];
        };
      };
    };
  };
  getProblemById_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ProblemWithStudyInfoResp'];
        };
      };
    };
  };
  getChildProblemById_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ChildProblemWithStudyInfoResp'];
        };
      };
    };
  };
  getsAvailable_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ListRespNoticeResp'];
        };
      };
    };
  };
  countAvailable: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['NoticeUnreadCountResp'];
        };
      };
    };
  };
  refresh: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['JwtResp'];
        };
      };
    };
  };
  search_7: {
    parameters: {
      query?: {
        query?: string;
        page?: number;
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageRespStudentResp'];
        };
      };
    };
  };
  getById_2: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PublishResp'];
        };
      };
    };
  };
  delete_4: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getsAvailable_2: {
    parameters: {
      query: {
        studentId: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ListRespNoticeResp'];
        };
      };
    };
  };
  refresh_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['AdminTokenResp'];
        };
      };
    };
  };
  delete_5: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removeStudentFromTeacher: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        teacherId: number;
        studentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TeacherResp'];
        };
      };
    };
  };
  deleteItem: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
        problemId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ProblemSetResp'];
        };
      };
    };
  };
}
